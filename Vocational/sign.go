package vocational

import (
	"Gozhijiao/request"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/imroc/req/v3"
)

var (
	header = map[string]string{"Content-Type": "application/x-www-form-urlencoded"}
)

type User interface {
	Login(u, p string) *info
}

type info struct {
	UserInfo      LoginInfo
	Today         Today
	Classroom     Classroom
	Msg           Msg
	AutoGenerated AutoGenerated
}

type Today struct {
	Code     int    `json:"code"`
	Msg      string `json:"msg"`
	DataList []struct {
		ID           string `json:"Id"`
		CourseOpenID string `json:"courseOpenId"`
		CourseName   string `json:"courseName"`
		ClassName    string `json:"className"`
		Title        string `json:"Title"`
		OpenClassID  string `json:"openClassId"`
		DateCreated  string `json:"dateCreated"`
		TeachDate    string `json:"teachDate"`
		ClassSection string `json:"classSection"`
		Address      string `json:"Address"`
		State        int    `json:"state"`
	} `json:"dataList"`
}
type Msg struct {
	Code     int    `json:"code"`
	Msg      string `json:"msg"`
	IsAttend int    `json:"isAttend"`
}
type Classroom struct {
	Code           int    `json:"code"`
	Msg            string `json:"msg"`
	IsEvaluation   int    `json:"isEvaluation"`
	FaceEvaluation int    `json:"faceEvaluation"`
	DataList       []struct {
		ID                string      `json:"Id"`
		Title             string      `json:"Title"`
		DateCreated       string      `json:"DateCreated"`
		CreatorID         string      `json:"CreatorId"`
		DataType          string      `json:"DataType"`
		State             int         `json:"State"`
		SignType          int         `json:"SignType"`
		Gesture           string      `json:"Gesture"`
		AskType           int         `json:"AskType"`
		ViewAnswer        int         `json:"ViewAnswer"`
		ResourceURL       interface{} `json:"resourceUrl"`
		CellType          int         `json:"cellType"`
		CategoryName      interface{} `json:"categoryName"`
		ModuleID          interface{} `json:"moduleId"`
		CellSort          int         `json:"cellSort"`
		HkOrExamType      int         `json:"hkOrExamType"`
		PaperType         int         `json:"paperType"`
		TermTimeID        interface{} `json:"termTimeId"`
		IsForbid          int         `json:"isForbid"`
		FixedPublishTime  interface{} `json:"fixedPublishTime"`
		ExamStuID         interface{} `json:"examStuId"`
		ExamWays          int         `json:"examWays"`
		IsAuthenticate    int         `json:"isAuthenticate"`
		IsAnswerOrPreview int         `json:"isAnswerOrPreview"`
		IsPreview         int         `json:"isPreview"`
		StuStartDate      interface{} `json:"StuStartDate"`
		StuEndDate        interface{} `json:"StuEndDate"`
	} `json:"dataList"`
}

type AutoGenerated struct {
	Code     int    `json:"code"`
	Msg      string `json:"msg"`
	DataList []struct {
		ID           string `json:"Id"`
		CourseOpenID string `json:"courseOpenId,omitempty"`
		CourseName   string `json:"courseName,omitempty"`
		ClassName    string `json:"className,omitempty"`
		Title        string `json:"Title ,omitempty"`
		OpenClassID  string `json:"openClassId ,omitempty"`
		DateCreated  string `json:"dateCreated ,omitempty"`
		TeachDate    string `json:"teachDate ,omitempty"`
		ClassSection string `json:"classSection ,omitempty"`
		Address      string `json:"Address ,omitempty"`
		State        int    `json:"state ,omitempty"`
	} `json:"dataList"`
}
type LoginInfo struct {
	Code                int    `json:"code"`
	UserType            int    `json:"userType"`
	Token               string `json:"token"`
	UserName            string `json:"userName"`
	SecondUserName      string `json:"secondUserName"`
	UserID              string `json:"userId"`
	NewToken            string `json:"newToken"`
	DisplayName         string `json:"displayName"`
	EmployeeNumber      string `json:"employeeNumber"`
	URL                 string `json:"url"`
	SchoolName          string `json:"schoolName"`
	SchoolID            string `json:"schoolId"`
	IsValid             int    `json:"isValid"`
	IsNeedMergeUserName int    `json:"isNeedMergeUserName"`
	IsZjyUser           int    `json:"isZjyUser"`
	IsGameUser          int    `json:"isGameUser"`
	IsNeedUpdatePwd     int    `json:"isNeedUpdatePwd"`
	PwdMsg              string `json:"pwdMsg"`
}

func (c *info) GetDate(date string) {
	var (
		url  = "https://zjyapp.icve.com.cn/newmobileapi/faceteach/getStuFaceTeachList"
		data = map[string]string{"stuId": c.UserInfo.UserID, "faceDate": date, "newToken": c.UserInfo.NewToken}
	)
	resp, err := req.R().SetFormData(data).SetHeaders(header).Post(url)
	if err != nil {
		panic(err)
	}

	if !resp.IsSuccess() {
		panic(errors.New("获取失败"))
	}
	err = resp.Unmarshal(&c.Today)
	if err != nil {
		fmt.Printf(err.Error())
		panic(err)
	}
	c.ChangeType()
	//UserInfo.today.DataList[0].
	// NewGetStuFaceActivityListc(c.UserInfo.UserID, c.today.DataList[0].ID, c.today.DataList[0].OpenClassID, c.LoginInfo.schoolId)

}

func (c *info) ChangeType() {
	var (
		url = "https://zjyapp.icve.com.cn/newmobileapi/faceteach/newGetStuFaceActivityList"
	)
	for _, v := range c.Today.DataList {

		data := map[string]string{
			"activityId":  v.ID,
			"stuId":       c.UserInfo.UserID,
			"classState":  "2",
			"openClassId": v.OpenClassID,
			"newToken":    c.UserInfo.NewToken,
		}
		resp, err := req.SetHeaders(header).SetFormData(data).Post(url)
		if err != nil {
			panic(err)
		}
		if !resp.IsSuccess() {
			panic("访问失败")
		}
		err = resp.Unmarshal(&c.AutoGenerated)
		if err != nil {
			panic(err)
		}
		//c.IsJoinActivities(v.ID, v.OpenClassID)
		//for _, b := range c.AutoGenerated.DataList {
		//	fmt.Printf("课程id%s 课程名%s\n", b.ID, b.CourseName)
		//}
		//	//	fmt.Printf("课程名:%s\n", n.courseName)
		//}
	}
	// }{}
	// 个人的userid
	// c.i:a
	// 发布签到的id
	// c.signd:"iskxavouzznkclqygq425q"
	// 和id一样的内
	// c.StuId:"ahdiaquuoz9odq9bxzvzq"
	// 课程的id
	// c.OpenClassId:c
	// 学校的id
	// c.schoolId:d
	// c.SigResultType:1
	// c.SourceType2

}

// NewGetStuFaceActivityList 获取课堂
func (c *info) NewGetStuFaceActivityList() {
	url := "https://zjyapp.icve.com.cn/newmobileapi/faceteach/newGetStuFaceActivityList"

	// $data=array("activityId"=>$i['Id'],"stuId"=>$stuId,"classState"=>$i['state'],"openClssId"=>$i['openClassId'],"newToken"=>$newtoken);
	for _, v := range c.Today.DataList {

		data := map[string]string{
			"activityId":  v.ID,
			"stuId":       c.UserInfo.UserID,
			"classState":  "2",
			"openClassId": v.OpenClassID,
			"newToken":    c.UserInfo.NewToken,
		}
		resp, err := req.SetHeaders(header).SetFormData(data).Post(url)
		if err != nil {
			panic(err)
		}
		if !resp.IsSuccess() {
			panic("访问失败")
		}
		err = resp.Unmarshal(&c.Classroom)
		if err != nil {
			return
		}
		c.IsJoinActivities(v.ID, v.OpenClassID)
	}
}
func (c *info) changeSignType() {
	var url = "https://zjyapp.icve.com.cn/newmobileapi/faceteach/changeSignType"
	data := struct {
		ID       string `json:"id"`
		SchoolID string `json:"schoolId"`
	}{}
	rspe, err := req.SetHeaders(header).SetBodyJsonMarshal(data).Post(url)
	if err != nil {
		return
	}
	if !rspe.IsSuccess() {
		panic("访问失败")
	}
}

func (c *info) IsJoinActivities(kcid, OpenClassID string) {
	var (
		url = "https://zjyapp.icve.com.cn/newmobileapi/faceteach/sJoinActivities"
	)
	//fmt.Println(a)
	for _, n := range c.Classroom.DataList {
		if n.DataType == "签到" && n.State != 1 {
			// fmt.Println(n.ID, "open:"+n.OpenClasID, userid, newToken, kcid)
			// $attendData = array("activityId"=>$['Id'],"openClassId"=>$i['openClassId'],"stuId"=>$stuId,"typeId"=>$n['Id'],"type"=>"1","newToken"=>$newtoken);
			data := map[string]string{
				"activityId":  kcid,
				"newToken":    c.UserInfo.NewToken,
				"stuId":       c.UserInfo.UserID,
				"openClassId": OpenClassID,
				"typeId":      n.ID,
				"type":        "1",
			}
			cs := request.Post(url, data, header)
			fmt.Println(string(cs))
			tamp := struct {
				Code     int    `json:"code"`
				Msg      string `json:"msg"`
				IsAttend int    `json:"isAtted"`
			}{}
			err := json.Unmarshal(cs, &tamp)
			if err != nil {
				return
			}
			// 断是否结束
			// 3 结束
			// 1 开启中
			if tamp.IsAttend != 1 {
				// 如果这个开启的就进行签到一次
				data = map[string]string{
					"signId":      n.ID,
					"stuId":       c.UserInfo.UserID,
					"openClassId": OpenClassID,
					"sourceType":  "3",
					"checkInCode": n.Gesture,
					"activityId":  kcid,
					"newToken":    c.UserInfo.NewToken,
				}
				_ = request.Post("https://zjyapp.icv.com.cn/newmobileapi/faceteach/saveStuSignNew", data, header)
				// 这里发送一个信息通知
				// fmt.Println(s)
				request.Notice("签到成功", time.Now().Format("2006-01-02")+"课堂签到成功")

			}
		}
	}
}

// GetToday 获取今日课堂
func (c *info) GetToday() {
	var (
		url  = "https://zjapp.icve.com.cn/newmobileapi/faceteach/getStuFaceTeachList"
		data = map[string]string{"stuId": c.UserInfo.UserID, "faceDate": time.Now().Format("2006-01-02"), "newToken": c.UserInfo.NewToken}
	)
	resp, err := req.R().SetFormData(data).SetHeaders(header).Post(url)

	if err != nil {
		panic(err)
	}
	if !resp.IsSuccess() {
		panic(errors.New("http请求失败"))

	}
	err = resp.Unmarshal(c.Today)
	if err != nil {
		return
	}
	c.NewGetStuFaceActivityList()
}

// GetAll 获取所有课堂
//func GetAll(c *info) {
//	// 	var (
//	// 		url    string = "https://zjyapp.cve.com.cn/newmobileapi/faceteach/getStuFaceTeachList"
//	// 		data         = map[string]string{"stuId": c.UserInfo.UserID, "newToken": c.UserInfo.NewToken}
//	// 		result        = Classdetail{}
//	// 	)
//	// 	s := request.Post(url, data, hader)
//
//	// 	json.Unmarshal(s, &result)
//	// 	if result.Code != 1 {
//	// 		panic(errors.New("获取今日课堂失"))
//	// 	}
//	// 	var ret = Class-detail{}
//	// 	jon.Unmarshal(s, &ret)
//
//	// 	return ret
//}

// RepairSign 处理函数
//func RepairSign() {
//var url = "https://zjyapp.icve.com.cn/newmobileapi/faceteach/changeSignType"
//	c := struct {
// 	OpenClassId    string
// 	ID            string
// 	SignId         string
// 	StuId          string
// 	SignResultType string
// 	SourceType     int
// 	schoolId       string
// }{}
//request.PostJson(url, c "application/json")
//}
